{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":""},{"location":"#welcome-to-ngists-documentation","title":"Welcome to nGIST's documentation!","text":"<p>Welcome the the documentation for the nGIST pipeline! nGIST is the extension of the gist pipeline, originally written by Adrian Bittner. The current lead developers are Amelia Fraser-McKelvie and Jesse van de Sande</p> <p>nGIST is a modular, python-based pipeline for the analysis of integral field spectroscopic data. The pipeline has been developed initially for use with the ESO-VLT/MUSE GECKOS and MAUVE large programmes, but can be adapted to any MUSE data (and any IFS data in the future).</p> <p>nGIST reads a MUSE cube, spatially masks it, Voronoi bins (if required), and then performs scientific analysis on it. Current modules perform stellar kinematic extraction, emission lines measures, stellar populations, and line strength measures. An additional, User-defined module, may be adapted to do whatever you like! The outputs are easy-to-read 2D maps files, which may be fed straight into your favourite plotting script, or used with mapviewer. </p>"},{"location":"contact/","title":"Get in contact!","text":"<p>Questions? Comments?  Feel free to submit an issue on our github page:, or else contact Amelia Fraser-McKelvie via email \ud83d\udce7.</p>"},{"location":"overview/","title":"Overview","text":"<ul> <li> <p>nGIST is a python-based framework that can be run from the command line in one simple step.</p> </li> <li> <p>nGIST is currently made up of ten modules, which may be switched on or off according to the user's wishes:</p> </li> </ul> <p> Basic flow chart of the ten nGIST modules. The top four are preparatory modules, while the bottom six are the science modules. Only the preparatory modules must be run - all others can be switched on or off according to a user's wishes. What is shown here is the recommended running sequence. In theory, the science mmodules can be run in any order.</p> <ul> <li>Configuration is controlled by a config .yaml file. This file houses the variables required.</li> </ul>"},{"location":"tutorial/","title":"Coming Soon!","text":""},{"location":"modules/continuum_cube/","title":"Continuum cube creation","text":""},{"location":"modules/continuum_cube/#purpose","title":"Purpose","text":"<p>Create continuum-only and continuum-subtracted line-only cubes. nGIST is currently equipped with one routine that can readily be used by setting the configuration parameter <code>CONT: METHOD</code> to <code>'ppxf'</code>. In particular, this routine employs the pPXF routine of Cappellari and Emsellem (2004). pPXF is run with multiplicative polynomials (more appropriate to match the shape of the spectra), and the bestfit saved as the continuum cube. Subtracting the continuum cube from the original spectrum gives the line-only cube. </p>"},{"location":"modules/continuum_cube/#config-file-input","title":"Config file input","text":"<pre><code># Continuum Cube module\nCONT :\n  METHOD : 'ppxf' # Name of the routine in stellarKinematics/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'ppxf' to use the standard GIST implementation, exploiting the pPXF routine of Cappellari &amp; Emsellem (2004).\n  SPEC_MASK : 'specMask_KIN' # File to define wavelength ranges to be masked during the stellar kinematics fit. The specified path is relative to the configDir path in defaultDir.\n  LMIN : 4750 # Rest-frame wavelength range used for the stellar kinematics analysis [in Angst.]\n  LMAX : 7100\n  SIGMA : 100 # Initial guess of the velocity dispersion of the system [in km/s]\n  MOM : 4 # Number of kinematic moments to be extracted\n  ADEG : 0 # Degree of the additive Legendre polynomial. Set '-1' to not include any additive polynomials\n  MDEG : 8 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials\n  REDDENING : null # As opposed to None. Initial guess on the stellar reddening E(B-V), in order to measure the stellar reddening. Note: This cannot be used together with multiplicative polynomials.\n  MC_PPXF : 0 # Number of Monte-Carlo simulations to extract errors on the stellar kinematics. Formal errors are saved in any case.\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS' or 'walcher'\n  LIBRARY : 'MILES/' # options are 'MILES/', 'miles_ssp_ch/', 'IndoUS', and 'Walcher/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n  DOCLEAN : True # Keyword to turn on/off the sigma clipping. Set to 'False' for testing.\n</code></pre>"},{"location":"modules/continuum_cube/#output","title":"Output","text":""},{"location":"modules/continuum_cube/#files","title":"Files","text":"<ul> <li> <p><code>_ORIGcube.fits</code>, Extension 1:</p> <ul> <li>The original cube, trimmed to the wavelength range defined by the <code>CONT: LMIN</code> and <code>CONT: LMAX</code> keywords. </li> </ul> </li> <li> <p><code>_CONTcube.fits</code>, Extension 1:</p> <ul> <li>The bestfit to the continuum derived from full spectral fitting.</li> </ul> </li> <li> <p><code>_LINEcube.fits</code>, Extension 1:</p> <ul> <li>The line-only cube, derived by original cube - continuum cube.</li> </ul> </li> </ul>"},{"location":"modules/continuum_cube/#function-returns","title":"Function returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/emission_lines/","title":"Emission lines","text":""},{"location":"modules/emission_lines/#purpose","title":"Purpose","text":"<p>This module performs a full emission-line analysis of the observed spectra. nGIST is currently equipped with three routines that can readily be used by setting the configuration parameter <code>GAS: METHOD</code> to <code>ppxf</code>, <code>MAGPI-gandalf</code>, or <code>gandalf</code>.</p>"},{"location":"modules/emission_lines/#ppxf-recommended","title":"<code>pPXF</code> (recommended)","text":"<p>Simultaneously fits the stellar continuum (using a set of SSPs) and emission lines (using a set of single-component Gaussian templates) to the spectra. This method is significantly faster than the gandalf and magpi-gandalf methods, and hence is the recommended method. This module is based on the PHANGS DAP emission line module, but includes the option of a 3-step sigma-clipping technique to accurately characterise the noise, and reject spurrious pixels. </p>"},{"location":"modules/emission_lines/#magpi-gandalf-and-gandalf","title":"<code>MAGPI-gandalf</code> and <code>gandalf</code>","text":"<p>These routines employ a Python translation of the original GandALF routine by Sarzi et al. (2006) and Falcon-Barroso et al. (2006). The <code>gandalf</code> routine is that implemented by the original GIST pipeline and is not recommended as it is believed that the line fluxes are incorrect. The <code>MAGPI-gandalf</code> routine is that implemented by the MAGPI team, with differences mostly to do with Gandalf failing for some Voronoi bins, particularly those with low signal-to-noise ratio. Their fix was to take an MC approach to fitting by making slight changes to the starting guesses for the kinematic parameters. The new routine creates multiple starting guesses and takes the minimum \u03c72 of these. The initial guess is a 3\u00d73 matrix of guesses around the stellar kinematics values. While testing is continuing, initial results are promising: the new version of Gandalf seems to fit more bins (and in a sensible manner). However, the MC approach slows this module down considerably. </p> <p>For all cases, the routine can be run on <code>BIN</code> and <code>SPAXEL</code> level data (configuration parameter <code>GAS: LEVEL</code>). With both these options, the analysis is performed using the full set of spectral templates. Alternatively, with the configuration parameter <code>BOTH</code>, a bin-level run using the full set of spectral templates is performed. Thereafter, a spaxel-level run is performed, using for each spaxel the optimal template derived in the bin-level run (of the bin the corresponding spaxel belongs to) instead of the full set of spectral templates.</p>"},{"location":"modules/emission_lines/#config-file-input","title":"Config file input","text":"<pre><code>GAS :\n  METHOD : 'ppxf' # options are 'ppxf', 'gandalf' or 'MAGPI_gandalf' Name of the routine in emissionLines/ (without .py) to perform the tasks. Set 'False' to turn off module. \n  SPEC_MASK : 'specMask_GAS' # Text file containing the wavelength ranges to be masked.\n  LEVEL : 'BIN' # Set 'BIN' to perform the analysis bin-by-bin, 'SPAXEL' for a spaxel-by-spaxel analysis, and 'BOTH' to perform a spaxel-by-spaxel analysis that is informed by a previous bin-by-bin analysis.\n  LMIN : 4750 # Rest-frame wavelength range used for the emission-line analysis [in Angst.]\n  LMAX : 7100\n  ERRORS : 0 # Derive errors on the emission-line analysis (0 No / 1 Yes). Note: Due to limitations in pyGandALF, this is currently not possible. We expect a new pyGandALF version to be published soon.\n  REDDENING : False # Include the effect of reddening by dust in the pyGandALF fit. Put in the form 0.1,0.1 without any spaces. If you intend to use multiplicative polynomials instead, set REDDENING to 'False' and add a MDEG keyword in the GAS section to set the polynomial order. Additive polynomials cannot be used with pyGandALF.\n  MDEG : 8 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials.\n  FIXED : True # Fix the stellar kinematics to the results obtained with the stellar kinematics module [True / False]\n  MOM : 2 # Gas moments. Set to 2 for V and sigma. Higher orders not yet tested\n  EBmV : null # De-redden the spectra for the Galactic extinction in the direction of the target previously to the analysis. Use e.g. EBmV = A_v / 3.2\n  EMI_FILE : 'emissionLinesPHANGS.config' # Emission line set-up file for emline fittet. The specified path is relative to the configDir path in defaultDir.\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS'\n  LIBRARY : 'MILES_EMLINES/' # options are 'MILES_EMLINES/' (contains asmaller subset of templates sim to that used by PHANGS) 'MILES/', 'miles_ssp_ch', or 'IndoUS'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n</code></pre>"},{"location":"modules/emission_lines/#output","title":"Output","text":""},{"location":"modules/emission_lines/#files","title":"Files","text":"<p>All outputs can be available at the BIN and SPAXEL level.</p> <ul> <li> <p><code>_gas_BIN.fits</code>: Extension 1:</p> <ul> <li> <p>Columns: [LineName][LineWavelength]_*: F Flux; A Amplitude; V Velocity; S Sigma| EBmV_0 Screen-like extinction from the stellar continuum | EBmV_1 Extinction in emission-line regions from Balmer decrement</p> </li> <li> <p>Rows: One line per bin/spaxel.</p> </li> </ul> </li> <li> <p><code>_gas_BIN.fits</code> Extension 2:</p> <ul> <li> <p>Columns: Same as in extension 1, but for errors</p> </li> <li> <p>Rows: One line per bin/spaxel.</p> </li> </ul> </li> <li> <p><code>_gas-bestfit_BIN.fits</code>, Extension 1:</p> <ul> <li> <p>The best fit to the spectrum, including continuum and emission lines</p> </li> <li> <p>Columns: BESTFIT The best fit to the spectrum</p> </li> <li> <p>Rows: One fit per bin/spaxel.</p> </li> </ul> </li> <li> <p><code>_gas-bestfit_BIN.fits</code>, Extension 2:</p> <ul> <li>Columns: LOGLAM The corresponding wavelength array</li> </ul> </li> <li> <p><code>_gas-bestfit_BIN.fits</code>, Extension 3:</p> <ul> <li>Columns: GOODPIX The spectral pixels included in the fit</li> </ul> </li> <li> <p><code>_gas-cleaned_BIN.fits</code>: Extension 1:</p> <ul> <li> <p>Columns: SPEC Emission-line subtracted spectra</p> </li> <li> <p>Rows: One line per bin/spaxel.</p> </li> </ul> </li> <li> <p><code>_gas-cleaned_BIN.fits</code>: Extension 2:</p> <ul> <li>Columns: <code>LOGLAM</code>: The corresponding wavelength array</li> </ul> </li> <li> <p><code>_gas_BIN_maps.fits</code></p> <ul> <li> <p>2D maps images of various emission line quantities for each line.</p> </li> <li> <p>Extensions: [LineName][LineWavelength]_*: <code>FLUX</code>, <code>FLUX_ERR</code>, <code>VEL</code>, <code>VEL_ERR</code>, <code>SIGMA</code>, <code>SIGMA_ERR</code>, <code>SIGMA_CORR</code></p> </li> </ul> </li> </ul>"},{"location":"modules/emission_lines/#function-returns","title":"Function returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/line_strengths/","title":"Line strengths","text":""},{"location":"modules/line_strengths/#purpose","title":"Purpose","text":"<p>The <code>lineStrengths</code> module measures line strength indices from the observed spectra. nGIST is currently equipped with one routine that can readily be used by setting the configuration parameter <code>LS: METHOD</code> to <code>'default'</code>. In particular, this routine employs a Python translation of the line strength measurement routine of Kuntschner et al. (2006) and the routine of Martin-Navarro et al. (2018) in order to match the measured line strength indices to single stellar population equivalent population properties.</p>"},{"location":"modules/line_strengths/#config-file-input","title":"Config file input","text":"<pre><code>LS :\n  METHOD : False #'default' # Name of the routine in lineStrengths/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'default' to use the standard GIST implementation, exploiting the routines of Kuntschner et al. (2006) and Martin-Navarro et al. (2018).\n  TYPE : 'SPP' # Set 'LS' to only measure line strength indices, or 'SPP' to also match these indices to stellar population properties.\n  LS_FILE : 'lsBands.config' # File to define the wavelength band of the line strength indices to be measured. The specified path is relative to the configDir path in defaultDir.\n  CONV_COR : 8.4 # Spectral resolution [in Angst.] at which the line strength indices are measured.\n  SPP_FILE : 'MILES_KB_LIS8.4.fits' # File providing predictions on line strength indices for a set of single stellar population models\n  MC_LS : 30 # Number of Monte-Carlo simulations in order to obtain errors on the line strength indices. Note: This must be turned on.\n  NWALKER : 10 # Number of walkers for the MCMC algorithm (used for the conversion of indices to population properties)\n  NCHAIN : 100 # Number of iterations in the MCMC algorithm (used for the conversion of indices to population properties)\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS'\n  LIBRARY : 'MILES/' # options are 'MILES/', 'miles_ssp_ch/', or 'IndoUS/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n</code></pre>"},{"location":"modules/line_strengths/#output","title":"Output","text":""},{"location":"modules/line_strengths/#files","title":"Files","text":"<p>All outputs are available in the <code>OrigRes</code> and <code>AdapRes</code> versions, as derived at the original and adapted spectral resolution of the spectra.</p> <ul> <li> <p><code>_ls.fits</code>, Extension 1: Line strength indices and their errors as estimated from MC-simulations</p> <ul> <li> <p>Columns: <code>Fe5015</code> Line strength index, names as defined in <code>lsBands.config</code> | <code>ERR_*</code> Errors on the line strength indices as estimated from MC-simulations</p> </li> <li> <p>Rows: One line per bin</p> </li> </ul> </li> <li> <p><code>_ls.fits</code>, Extension 2: Single stellar population equivalent population properties as estimated with a MCMC algorithm from the line strength indices</p> <ul> <li> <p>Columns: <code>[lineLabel]_PERCENTILES</code> Percentiles of the resulting MCMC distribution for the line denoted [lineLabel] in <code>lsBands.config</code></p> </li> <li> <p>Rows: One line per bin</p> </li> </ul> </li> <li> <p><code>_ls-cleaned_linear.fits</code>: Extension 1:</p> <ul> <li> <p>Emission-subtracted, linearly binned spectra</p> </li> <li> <p>Columns: <code>SPEC</code> Emission-subtracted, linearly binned spectra | <code>ESPEC</code> Variance spectra</p> </li> <li> <p>Rows: One line per bin.</p> </li> </ul> </li> <li> <p><code>_ls-cleaned_linear.fits</code>: Extension 2:</p> <ul> <li>Columns: <code>LAM</code> The corresponding wavelength array</li> </ul> </li> </ul>"},{"location":"modules/line_strengths/#function-returns","title":"Function returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/prepare_spectra/","title":"Prepare spectra","text":""},{"location":"modules/prepare_spectra/#purpose","title":"Purpose","text":"<p>The purpose of the module is to prepare the spectra for the analysis, in particular by applying the binning pattern to the spectra and log-rebinning them. Note that the natural logarithm is used. nGIST is currently equipped with one routine to prepare the observed spectra for the analysis. This routine is included in the source code and can readily be used by setting the configuration parameter <code>PREPARE_SPECTRA: METHOD</code> to <code>'default'</code>.</p> <p>In particular, it</p> <ul> <li> <p>Applies the spatial binning pattern to the linearly binned spectra and saves them</p> </li> <li> <p>Logarithmically-rebins the spectra and saves them; Note that the natural logarithm is used</p> </li> <li> <p>Applies the spatial binning pattern to the logarithmically binned spectra and saves them</p> </li> </ul>"},{"location":"modules/prepare_spectra/#config-file-input","title":"Config file input","text":"<pre><code>PREPARE_SPECTRA :\n  METHOD : 'default'\n  VELSCALE : 41 # [km/s]. Velocity scale of the spectrum.\n</code></pre>"},{"location":"modules/prepare_spectra/#output","title":"Output","text":""},{"location":"modules/prepare_spectra/#files","title":"Files","text":"<ul> <li> <p><code>_BinSpectra.hdf5</code>, Extension 1:</p> <ul> <li> <p>Contains the Voronoi-binned spectra equally spaced in velocity domain (logarithmically binned).</p> </li> <li> <p>Columns: <code>SPEC</code> Spectra | <code>ESPEC</code> Variance spectra</p> </li> <li> <p>Rows: One line per bin.</p> </li> <li> <p>Header: The header in extension 0 must contain the keyword <code>VELSCALE</code> which defines the width of one spectral pixel in velocity space.</p> </li> </ul> </li> <li> <p><code>_BinSpectra.hdf5</code>, Extension 2:</p> <ul> <li> <p>Columns: <code>LOGLAM</code> The corresponding wavelength array</p> </li> <li> <p><code>_BinSpectra_linear.fits</code>, Extension 1:</p> </li> <li> <p>Contains the Voronoi-binned spectra equally spaced in wavelength domain (linearly binned).</p> </li> <li> <p>Columns: <code>SPEC</code> Spectra | <code>ESPEC</code> Variance spectra</p> </li> <li> <p>Rows: One line per bin.</p> </li> </ul> </li> <li> <p><code>_BinSpectra_linear.hdf5</code>, Extension 2:</p> <ul> <li>Columns: <code>LOGLAM</code> The corresponding wavelength array</li> </ul> </li> </ul>"},{"location":"modules/prepare_spectra/#function-returns","title":"Function Returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/read_data/","title":"Read data","text":""},{"location":"modules/read_data/#purpose","title":"Purpose","text":"<p>Read the input data, for instance the IFU cube, and return the relevant information in a dictionary. Such a read-in routine has to perform the following tasks:</p> <ul> <li> <p>Read spectra and error spectra</p> </li> <li> <p>Get the wavelength information</p> </li> <li> <p>Get the spatial coordinates</p> </li> <li> <p>Shift the spectra to restframe, according the configuration parameter GENERAL|REDSHIFT (Note that this is required for user-defined read-in routines, in order to work consistently with the subsequent modules).</p> </li> <li> <p>Shorten the wavelength range of the spectra</p> </li> <li> <p>Compute a signal-to-noise ratio for each spaxel</p> </li> <li> <p>Determine the velscale of the spectra</p> </li> </ul> <p>Currently, nGIST has been tested only with the following read in routine(s):  - <code>MUSE_WFM</code> The widefiels mode of the MUSE spectrograph without adaptive optics.</p>"},{"location":"modules/read_data/#config-file-input","title":"Config file input","text":"<pre><code>READ_DATA :\n METHOD : 'MUSE_WFM' # Name of the routine in readData/ (without .py) to be used to read-in the input data.\n DEBUG : FALSE # Switch to activate debug mode [True/False]: Pipeline runs on one, central line of pixels. Keep in mind to clean output directory after running in DEBUG mode!\n ORIGIN : 222,223 #217,218 # Origin of the coordinate system in pixel coordinates: x,y (Indexing starts at 0).\n LMIN_TOT : 4800 # Spectra are shortened to the rest-frame wavelength range defined by LMIN_TOT and LMAX_TOT. Note that this wavelength range should be longer than all other wavelength ranges supplied to the modules [in Angst.]\n LMAX_TOT : 7000\n LMIN_SNR : 4800 # Rest-frame wavelength range used for the signal-to-noise calculation [in Angst.]\n LMAX_SNR : 7000\n EBmV : 0.104575 # [mag] Galactic foreground dust reddening correction for the RA, DEC of the target. Or set to null for no redenning correction.\n</code></pre>"},{"location":"modules/read_data/#output","title":"Output","text":""},{"location":"modules/read_data/#files","title":"Files","text":"<p>None</p>"},{"location":"modules/read_data/#function-returns","title":"Function returns","text":"<ul> <li> <p><code>x</code> x-coordinate for each spaxel [array, size=(nspaxel,)]</p> </li> <li> <p><code>y</code> y-coordinate for each spaxel [array, size=(nspaxel,)]</p> </li> <li> <p><code>wave</code> Wavelength array [array, size=(nspecs,)]</p> </li> <li> <p><code>spec</code> Spectra [array, size=(nspecs,nspaxel)]</p> </li> <li> <p><code>error</code> Error spectra [array, size=(nspecs,nspaxel)]</p> </li> <li> <p><code>snr</code> Signal-to-noise ratio for each spaxel [array, size=(nspaxel,)]</p> </li> <li> <p><code>signal</code> Signal in each spaxel [array, size=(nspaxel,)]</p> </li> <li> <p><code>noise</code> Noise in each spaxel [array, size=(nspaxel,)]</p> </li> <li> <p><code>velscale</code> Spectral pixelsize in velocity space [float]</p> </li> <li> <p><code>pixelsize</code> Spatial pixelsize of the instrument [float]</p> </li> </ul> <p>(nspaxel denotes the total number of spatial pixels; nspecs denotes the total number of spectral pixels)</p>"},{"location":"modules/spatial_binning/","title":"Spatial binning","text":""},{"location":"modules/spatial_binning/#purpose","title":"Purpose","text":"<p>The purpose of the module is to spatially bin the data, for instance in order to obtain an approximately constant signal-to-noise ratio throughout the field-of-view. Alternatively, one could use this step in the workflow to isolate spectra of specific features, e.g. globular cluster or planetary nebulae, and continue the analysis only with these. In this way the GIST could simply be turned into a specific tool for the analysis of globular clusters or planetary nebulae.</p> <p>nGIST is currently equipped with one routine to spatially bin the data. This routine is included in the source and exploits the adaptive Voronoi tesselation routine of Cappellari &amp; Copin (2003). It can readily be used by setting the configuration parameter <code>SPATIAL_BINNING:METHOD</code> to <code>'voronoi'</code>.</p> <p>In addition, the module determines the closest valid Voronoi bin for all masked spaxels. These are assigned a negative BIN_ID, with the absolute value stating the BIN_ID of the closest valid Voronoi bin. A BIN_ID 0 is a valid Voronoi bin, in particular the one containing the spaxel with the highest signal-to-noise ratio.</p> <p>The routine finally saves a tables that defines which spaxel belongs to which bin, including basic properties of bins and spaxels, such as position, flux, signal-to-noise, etc.</p>"},{"location":"modules/spatial_binning/#config-file-input","title":"Config file input","text":"<pre><code>SPATIAL_BINNING :\n  METHOD : 'voronoi' # Name of the routine in spatialBinning/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'voronoi' to use the standard GIST implementation, exploiting the Voronoi tesselation routine of Cappellari &amp; Copin (2003).\n  TARGET_SNR : 500.0 # Target signal-to-noise ratio for the Voronoi binning\n  COVARIANCE : 0.0 # Correct for spatial correlations of the noise during the Voronoi binning process according to the empirical equation SNR /= 1 + COVAR_VOR * np.log10(NSPAXEL) with NSPAXEL being the number of spaxels per bin (see e.g. Garcia-Benito et al. 2015).\n</code></pre>"},{"location":"modules/spatial_binning/#output","title":"Output","text":""},{"location":"modules/spatial_binning/#files","title":"Files","text":"<ul> <li> <p><code>_table.fits</code>: Contains information to reconstruct the spatial binning pattern. Most importantly, it defines the <code>BIN_ID</code>, that assigns each spaxel to a bin.</p> <ul> <li> <p>Columns: <code>ID</code> Spaxel ID | <code>BIN_ID</code> Bin ID | <code>X</code> <code>Y</code> Pixel coordinates of spaxels | <code>XBIN</code> <code>YBIN</code> Pixel coordinates of bins | <code>FLUX</code> Flux in the spaxel | <code>SNR</code> Signal-to-noise ratio in the spaxel | <code>SNRBIN</code> Signal-to-noise ratio in the bin | <code>NSPAX</code> Number of spaxels in the bin</p> </li> <li> <p>Rows: One line per spaxel.</p> </li> <li> <p>Header: The header of extension 0 has to contain the entry <code>PIXSIZE</code> defining the angular size of one spatial pixel.</p> </li> </ul> </li> </ul>"},{"location":"modules/spatial_binning/#function-returns","title":"Function Returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/spatial_masking/","title":"Spatial masking","text":""},{"location":"modules/spatial_masking/#purpose","title":"Purpose","text":"<p>nGIST is currently equipped with one routine to mask spatial regions in the IFU cube. This routine is included in the source code and can readily be used by setting the configuration parameter <code>SPATIAL_MASKING: METHOD</code> to default. This routine performs three tasks:</p> <ul> <li> <p>It masks defunct spaxels, i.e. spaxels with negative mean values or those containing np.nan\u2019s.</p> </li> <li> <p>It applies a signal-to-noise threshold. In particular, it masks all spaxels below the isophote level which has a mean signal-to-noise ratio of <code>SPATIAL_MASKING: MIN_SNR</code>.</p> </li> <li> <p>It applies a manually defined mask. In particular, it reads a fits-file which path is given by the parameter <code>SPATIAL_MASKING:MASK</code> (path relative to <code>GENERAL:INPUT</code>; set to False to turn this option off). The file is expected to have the same spatial dimensions as the input IFU cube. Unmasked spaxels should have the value 0, while masked spaxels should have the value 1.</p> </li> </ul>"},{"location":"modules/spatial_masking/#config-file-input","title":"Config file input","text":"<pre><code>SPATIAL_MASKING :\n  METHOD : 'default' #'default' # Name of the routine in spatialMasking/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'default' to use the standard GIST implementation.\n  MIN_SNR : 1.5 # Spaxels below the isophote level which has this mean signal-to-noise level are masked.\n  MASK : 'NGC0000_mask.fits' # File containing a spatial mask (Set 'False' to not include a file).\n</code></pre>"},{"location":"modules/spatial_masking/#output","title":"Output","text":""},{"location":"modules/spatial_masking/#files","title":"Files","text":"<ul> <li> <p><code>*_mask.fits</code>: Contains information on the spatial masking.</p> <ul> <li> <p>Columns: <code>MASK</code> Combination of all masks | <code>MASK_DEFUNCT</code> Mask based on defunct spaxels | <code>MASK_SNR</code> Mask based on signal-to-noise criterion | <code>MASK_FILE</code> Mask based on file</p> </li> <li> <p>Rows: One line per spaxel.</p> </li> </ul> </li> </ul>"},{"location":"modules/spatial_masking/#function-returns","title":"Function returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/stellar_kinematics/","title":"Stellar kinematics","text":""},{"location":"modules/stellar_kinematics/#purpose","title":"Purpose","text":"<p>The <code>stellarKinematics</code> module measures the stellar kinematics of the observed spectra. nGIST is currently equipped with one routine that can readily be used by setting the configuration parameter <code>KIN: METHOD</code> to <code>'ppxf'</code>. In particular, this routine employs the pPXF routine of Cappellari and Emsellem (2004). More precisely:</p> <ul> <li> <p>Initial guesses: The used initial guess for the stellar velocity is 0 (as all spectra have been shifted to rest-frame). The initial guess for the velocity dispersion is defined in the configuration parameter <code>KIN: SIGMA</code>. Alternatively, one can define initial guesses for all bins separately, i.e. by supplying the file <code>*_kin-guess.fits</code> in the output directory before the run. This file must contain a column <code>V</code> and <code>SIGMA</code> (as in the output file <code>*_kin.fits</code>), defining an initial guess for each spatial bin.</p> </li> <li> <p>A spectral mask is applied, according to the masking file defined by <code>KIN: SPEC_MASK</code>. See Configuration for details.</p> </li> <li> <p>The module calculates the stellar velocity, sigma, and higher-order velocity moments (depending on how many are specified, currently up to 6 have been tested). An iterative sigma-clipping process can be turned on to clean the spectra.</p> </li> <li> <p>A set of SSP templates must be input. Currently, nGIST has been tested on the MILES stars and SSPs, eMILES, SMILES libraries, the IndoUS library, the X-shooter stellar library, and Walcher+2009 templates. Only the MILES SSPs are included in the default nGIST distribution, though any other library can be employed by writing a read-in module for it, following the example in your <code>/ngist/ngistPipeline/prepareTemplates/miles.py</code> directory. </p> </li> </ul>"},{"location":"modules/stellar_kinematics/#config-file-input","title":"Config file input","text":"<pre><code>KIN :\n  METHOD : 'ppxf' # Name of the routine in stellarKinematics/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'ppxf' to use the standard GIST implementation, exploiting the pPXF routine of Cappellari &amp; Emsellem (2004).\n  SPEC_MASK : 'specMask_KIN' # File to define wavelength ranges to be masked during the stellar kinematics fit. The specified path is relative to the configDir path in defaultDir.\n  LMIN : 4750 # Rest-frame wavelength range used for the stellar kinematics analysis [in Angst.]\n  LMAX : 7100\n  SIGMA : 100 # Initial guess of the velocity dispersion of the system [in km/s]\n  MOM : 4 # Number of kinematic moments to be extracted\n  ADEG : 12 # Degree of the additive Legendre polynomial. Set '-1' to not include any additive polynomials\n  MDEG : 0 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials\n  REDDENING : null # Initial guess on the stellar reddening E(B-V), in order to measure the stellar reddening. Note: This cannot be used together with multiplicative polynomials.\n  MC_PPXF : 0 # Number of Monte-Carlo simulations to extract errors on the stellar kinematics. Formal errors are saved in any case.\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # \n  LIBRARY : 'MILES/' # options are 'MILES/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n  DOCLEAN : True # Keyword to turn on/off the sigma clipping. Set to 'False' for testing.\n</code></pre>"},{"location":"modules/stellar_kinematics/#output","title":"Output","text":""},{"location":"modules/stellar_kinematics/#files","title":"Files","text":"<ul> <li> <p>_kin.fits: Results of the extraction of stellar kinematics and their errors</p> <ul> <li> <p>Columns: <code>V SIGMA H3 H4 etc</code> Stellar kinematics. The number of columns here will correspond to value of the <code>MOM</code> keyword. For example, <code>MOM: 4</code> will return <code>V SIGMA H3 H4</code>, while <code>MOM:6</code> will return <code>V SIGMA H3 H4 H5 H6</code>  | <code>ERR_*</code> Errors on the stellar kinematics from MC-simulations | <code>FORM_ERR_*</code> Formal errors on the stellar kinematics | <code>REDDENING</code> Extinction calculated by PPXF</p> </li> <li> <p>Rows: One line per bin.</p> </li> </ul> </li> <li> <p>_kin-bestfit.fits, Extension 1:</p> <ul> <li> <p>The best fit to the spectrum</p> </li> <li> <p>Columns: <code>BESTFIT</code> The best fit to the spectrum</p> </li> <li> <p>Rows: One fit per bin.</p> </li> </ul> </li> <li> <p>_kin-bestfit.fits, Extension 2:</p> <ul> <li>Columns: <code>LOGLAM</code> The corresponding wavelength array</li> </ul> </li> <li> <p>_kin-bestfit.fits, Extension 3:</p> <ul> <li>Columns: <code>GOODPIX</code> The spectral pixels included in the fit</li> </ul> </li> <li> <p>_kin-optimalTemplates.fits: Extension 1</p> <ul> <li> <p>Optimal template for the fit on each bin.</p> </li> <li> <p>Columns: <code>OPTIMAL_TEMPLATES</code> Optimal templates</p> </li> <li> <p>Rows: One template per bin.</p> </li> </ul> </li> <li> <p>_kin-optimalTemplates.fits: Extension 2</p> <ul> <li>Columns: <code>LOGLAM_TEMPLATE</code> The corresponding wavelength array</li> </ul> </li> <li> <p>_kin-SpectralMask.fits, Extension 1:</p> <ul> <li> <p>Columns: <code>SPECTRAL_MASK</code> The spectral pixels masked out in the fit</p> </li> <li> <p>Rows: One mask per bin</p> </li> </ul> </li> </ul>"},{"location":"modules/stellar_kinematics/#function-returns","title":"Function returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"modules/stellar_populations/","title":"Stellar populations","text":""},{"location":"modules/stellar_populations/#purpose","title":"Purpose","text":"<p>The starFormationHistories module derives non-parametric star formation histories from the observed spectra. nGIST is currently equipped with one routine that can readily be used by setting the configuration parameter <code>SFH: METHOD</code> to <code>'ppxf'</code>. In particular, this routine employs the pPXF routine of Cappellari &amp; Emsellem (2004).</p> <p>There are several options for the treatment of emission lines in this module:</p> <ul> <li>To run the SFH module using the cleaned, emission-line subtracted spectra, you simply need to make sure that you ran the emission line module previously (i.e. set <code>GAS: METHOD: 'ppxf'</code>)</li> <li>To run the SFH module using the original (un-subtracted) spectrum, run the SFH module with the GAS module turned off (i.e. set <code>GAS: METHOD: False</code>).</li> <li>To run the SFH module and mask all emission lines, use <code>SFH: SPEC_MASK: 'specMask_KIN'</code></li> <li>To run the SFH module and not mask any emission lines, use <code>SFH: SPEC_MASK: 'specMask_SFH'</code>.</li> </ul>"},{"location":"modules/stellar_populations/#config-file-input","title":"Config file input","text":"<pre><code>SFH :\n  METHOD : 'ppxf' # Name of the routine in starFormationHistories/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'ppxf' to use the standard GIST implementation, exploiting the pPXF routine of Cappellari &amp; Emsellem (2004).\n  LMIN : 4750 # Rest-frame wavelength range used for the star formation histories analysis [in Angst.]\n  LMAX : 5500\n  SPEC_MASK : 'specMask_SFH' # File to define wavelength ranges to be masked during the star formation histories analysis. The specified path is relative to the configDir path in defaultDir.\n  SPEC_EMICLEAN : False # Keyword (True/False) to enable/disable the use of emission line cleaned spectra from the Emission Line Fitting Module. \n  MOM : 4 # Number of kinematic moments to be extracted. If you use FIXED = True, this should be same number of moments used to extract the stellar kinematics before. Otherwise the parameter can be set independently.\n  MDEG : 12 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials. Note that additive Legendre polynomials cannot be used for this module.\n  REGUL_ERR : 1000000. # Regularisation error for the regularised run of pPXF. Note: Regularisation = 1 / REGUL_ERR\n  NOISE : 1. # Set a wavelength independent noise vector to be passed to pPXF.\n  FIXED : True # Fix the stellar kinematics to the results obtained with the stellar kinematics module [True / False]. If 'False', please provide an initial guess on the velocity dispersion of the systems [in km/s] by adding the parameter SIGMA.\n  MC_PPXF : 0 # Added to add the option of running MC on the SFH module\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS (not recc.)'\n  LIBRARY : 'MILES_SFH/' # options are 'MILES/', 'miles_ssp_ch/', or 'IndoUS/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n  DOCLEAN : True # Keyword to turn on/off the sigma clipping. Set to 'False' for testing.\n</code></pre>"},{"location":"modules/stellar_populations/#output","title":"Output","text":""},{"location":"modules/stellar_populations/#files","title":"Files","text":"<ul> <li> <p><code>_sfh.fits</code>:</p> <ul> <li> <p>Columns: <code>AGE</code> Age | <code>METAL</code> Metallicity | <code>ALPHA</code> Alpha enhancement | <code>V SIGMA H3 H4</code> Stellar kinematics | <code>FORM_ERR_*</code> Formal errors on the stellar kinematics</p> </li> <li> <p>Rows: One line per bin.</p> </li> </ul> </li> <li> <p><code>_sfh-weights.fits</code>: The weights assigned to each template during the fit</p> <ul> <li> <p>Columns: <code>WEIGHTS</code> The weights</p> </li> <li> <p>Rows: One line per bin.</p> </li> </ul> </li> <li> <p><code>_sfh-bestfit.fits</code>, Extension 1:</p> <ul> <li> <p>The best fit to the spectrum</p> </li> <li> <p>Columns: <code>BESTFIT</code> The best fit to the spectrum</p> </li> <li> <p>Rows: One fit per bin.</p> </li> </ul> </li> <li> <p><code>_sfh-bestfit.fits</code>, Extension 2:</p> <ul> <li>Columns: <code>LOGLAM</code> The corresponding wavelength array</li> </ul> </li> <li> <p><code>_sfh-bestfit.fits</code>, Extension 3:</p> <ul> <li>Columns: <code>GOODPIX</code> The spectral pixels included in the fit</li> </ul> </li> </ul>"},{"location":"modules/stellar_populations/#function-returns","title":"Function returns","text":"<p>The module should end with <code>return(None)</code>. If an uncaught exception occurs in the module, all following modules will be skipped for this galaxy. If you intend to manually skip all subsequent modules, simply raise an exception.</p>"},{"location":"usage/configuration/","title":"Configuration","text":""},{"location":"usage/configuration/#working-directory","title":"Working directory","text":"<p>While the nGIST pipeline is installed in the system and can be executed from anywhere, directories containing the input, output, configuration, and spectral templates have to be defined. In the example working directory this is done with the file <code>defaultDir</code> in which the absolute paths to these directories should be defined. The path to this file needs to be supplied to the mGIST pipeline with the command-line argument <code>default-dir</code>.</p> <p>An overview of these directories and some important files is provided below:</p> <pre><code>workingDirectory/\n|\n|- inputData/\n|  |- NGC0000.fits\n|  |_ NGC0000_mask.fits\n|\n|- spectralTemplates/\n|  |- MILES/\n|  |_ MILES_KB_LIS8.4.fits\n|\n|- configFiles/\n|  |- MasterConfig.yaml\n|  |- defaultDir\n|  |- lsf_MUSE-WFM\n|  |- lsf_MILES\n|  |- emissionlinesPHANGS.config\n|  |- lsBands.config\n|  |- specMask_KIN\n|  |_ specMask_SFH\n|\n|_ results/\n</code></pre> <p>The directory <code>inputData/</code> contains all the input data. Which input data is used by the pipeline is stated in <code>MasterConfig.yaml</code> (see below).</p> <p>The directory <code>results/</code> contains the outputs of the GIST pipeline. The results from different runs of the pipeline are located in different subdirectories of <code>results/</code>. The name of these subdirectories is specified in <code>MasterConfig.yaml</code> (see below).</p> <p>The directory <code>spectralTemplates/</code> can contain various spectral template libraries in different subdirectories (e.g. <code>MILES/</code>). In addition, if one intends to match a set of measured absorption line strength indices to single stellar populations (SSP), it is necessary to supply a fits-file with the same name as the spectral template library (e.g. <code>MILES.fits</code>). This file has to provide the predicted line strength indices for the various SSPs in the library.</p> <p>The directory <code>configFiles/</code> contains all relevant configuration files. These are in particular:</p> <p><code>MasterConfig.yaml</code>: This file provides the main configuration of the pipeline. It defines which input data and spectral template library is used and which analysis modules will be executed. It further specifies the main parameters for this analysis, for instance the target signal-to-noise ratio of the Voronoi binning and the rest-frame wavelength range in consideration. The main configuration file is passed to the pipeline with the command-line argument --config (see Running the Pipeline).</p> <p><code>defaultDir</code>: This file defines the absolute paths to the input, output, configuration, and spectral template directories. It must be passed to the pipeline with the command-line argument <code>--default-dir</code> (see Running the Pipeline).</p> <p><code>lsf_[Instrument]</code>: This file defines the line-spread-function of the used instrument.</p> <p><code>lsf_[TemplateLibrary]</code>: This file defines the line-spread-function of the used template library.</p> <p><code>emissionLinesPHANGS.config</code>: This file specifies the various emission-lines to be fitted or masked with the emissionLines module. Note that this configuration file only affects the emissionLines module.</p> <p><code>lsBands.config</code>: This file states the wavelength bands of the line strength indices measured by the lineStrengths module. It further defines which indices to consider for the conversion of line strength indices to stellar population properties. Note that this configuration file only affects the lineStrengths module.</p> <p><code>specMask_KIN</code>: This files defines spectral regions to be masked during the stellarKinematics analysis. All sky lines and emission lines are masked in this file.</p> <p><code>specMask_SFH</code>: This files defines spectral regions to be masked during the starFormationHistories analysis. Only sky lines are masked in this file (i.e. emission lines are not masked.)</p> <p>The files <code>emissionLinesPHANGS.config</code>, <code>lsBands.config</code>, <code>specMask_KIN</code> and <code>specMask_SFH</code> can be different for different runs of the pipeline. Therefore, the files provided in <code>configFiles/</code> should only be considered as templates. The used versions of these files always need to be defined in the corresponding parameters in <code>MasterConfig.yaml</code>.</p> <p>A detailed description of each configuration file is also provided.</p>"},{"location":"usage/gettingstarted/","title":"Getting started","text":""},{"location":"usage/gettingstarted/#running-ngist","title":"Running <code>nGIST</code>","text":"<p>Once you have cloned the two github repositories and installed nGIST, you will be able to test the installation using the test cube, NGC 0000. nGIST is initially configured such that your working directory is <code>ngistTutorial/</code>. In this working directory, execute the following command:</p> <pre><code>ngistPipeline --config configFiles/MasterConfig.yaml --default-dir configFiles/defaultDir\n</code></pre> <p>The pipeline will begin by printing the values input by your <code>MasterConfig.yaml</code> file, and then run through each module listed in the <code>MasterConfig.yaml</code> file in turn. Each step is printed in your terminal, and in the resultant logfile. </p>"},{"location":"usage/gettingstarted/#output","title":"Output","text":"<p>Outputs are saved in the <code>ngistTutorial/results/RUN_NAME</code> folder, where the <code>RUN_NAME</code> is specified in the <code>Master_Config.yaml</code>. </p> <p>Current output files are:</p> <p><code>_BinSpectra.hdf5</code> - a table containing the spatially binned log-rebinned spectra  <code>_BinSpectra_linear.hdf5</code> - a table containing the spatially binned lin-binned spectra  <code>_table.fits</code> - a table used to reconstruct 2D maps files based on the Voronoi binning. <code>_mask.fits</code> <code>_kin.fits</code> - a table containing the stellar kinematics results  <code>_kin-bestfit.fits</code> <code>_kin-optimalTemplates.fits</code> <code>_kin-SpectralMask.fits</code> <code>_KIN_maps.fits</code> <code>_CONTcube.fits</code> - an emission line-subtracted continuum cube  <code>_LINEcube.fits</code> - a continuum-subtracted line cube  <code>_ORIGcube.fits</code> <code>_gas_BIN/SPX.fits</code> - a table containing the Voronoi binned (BIN) or spaxel-level (SPX) emission line results  <code>_gas_BIN/SPX_maps.fits</code> <code>_gas-bestfit_BIN/SPX.fits</code> <code>_gas-cleaned_BIN/SPX.fits</code> <code>_SFH_maps.fits</code> <code>_sfh-bestfit.fits</code> <code>_sfh-weights.fits</code> <code>_sfh.fits</code>  - a table containing the stellar populations results  <code>_LS_ADAPTED_maps.fits</code> <code>_LS_ORIGINAL_maps.fits</code> <code>_ls_AdapRes.fits</code> <code>_ls_OrigRes.fits</code> <code>_ls-cleaned_linear.fits</code> </p>"},{"location":"usage/gettingstarted/#visualising-your-results","title":"Visualising your results","text":"<p>While the <code>MAPS.fits</code> files can be read in and plotted using e.g. python, the original GIST pipeline also developed the Mapviewer software, which enables a quick-look at your data. To use, run: <pre><code>Mapviewer\n</code></pre> in your terminal, making sure that you are using the python environment in which nGIST is installed. </p>"},{"location":"usage/gettingstarted/#next-steps","title":"Next steps","text":"<p>Now it's time to try one of your own cubes! Simply edit the <code>MasterConfig.yaml</code> file with the details of your own cube, and run!</p>"},{"location":"usage/installation/","title":"Installation<sup>1</sup>","text":"<p>The pipeline is available via the GECKOS Survey Github page. There are two repositories here, the nGIST repo, which contains the nGIST code itself, and the ngist_supplementary_public repo, which contains some extra examples to get you started.</p>"},{"location":"usage/installation/#cloning-repositories","title":"Cloning repositories","text":"<p>Clone the <code>ngist</code> and <code>ngist-supplementary-public</code> repos to your local machine using the HTTPS tab.</p> <p><code>git clone https://github.com/geckos-survey/ngist.git</code></p> <p><code>git clone https://github.com/geckos-survey/ngist_supplementary_public.git</code></p>"},{"location":"usage/installation/#setting-up-your-python-environment","title":"Setting up your Python environment","text":"<p>(optional, but strongly recommended) Set up a separate Python environment to run nGIST in. The <code>ngistenv.yaml</code> file located in the <code>ngist_supplementary_public</code> repo can be used to install all of the dependencies and specified versions into a conda environment using the following call:</p> <pre><code>conda env create -f ngistenv.yaml\n</code></pre> <p>If you do not use conda or another package manager, make sure you are running nGIST using <code>python &gt;3.11</code>, and the latest versions of <code>astropy</code>, <code>numpy</code>, <code>scipy</code>, <code>matplotlib</code>, <code>spectral-cube</code>, <code>extinction</code>, <code>pip</code>, <code>latex</code>, <code>pyqt5</code>, <code>joblib</code>, <code>h5py</code>, and <code>tqdm</code>.</p>"},{"location":"usage/installation/#installing-ngist","title":"Installing nGIST","text":"<p>In your new Python environment navigate to the ngist/ folder and run  <pre><code>pip install .\n</code></pre></p> <p>That's it! nGIST should be installed and ready to use. </p>"},{"location":"usage/installation/#updating-ngist","title":"Updating nGIST","text":"<p>You should always check for new updates. before running nGIST. In your ngist/ folder type  <pre><code>git pull --all\n</code></pre> and then reinstall any new updates using pip: <pre><code>pip install .\n</code></pre> If you have any issues with the code not updating, try  <pre><code>pip uninstall ngistPipeline\npip install .\n</code></pre> If even that doesn't work, remove the .egg directory <pre><code>rem -r ngistPipeline.egg-info\npip install .\n</code></pre></p> <ol> <li> <p>Installation has been tested using OSX and Linux. Windows OS is not currently supported.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage/masterconfig/","title":"The <code>MasterConfig.yaml</code> file","text":"<p>The input for nGIST is a convineient, human-readable python YAML file. This file is tab-sensitive, so please conserve the structure when editing. An example MasterConfig.yaml file is shown below. </p> <pre><code># This is a test config file\nGENERAL :\n  RUN_ID : 'NGC0000Example' # Name of the analysis run. A subdirectory of this name within the output directory \n  # will be created. This identifier further serves as a prefix to all output files.\n  INPUT : 'NGC0000.fits' # Input file for this analysis run. The specified path \n  # is relative to the input path given in defaultDir.\n  OUTPUT : . # Output directory. The output of this run will be collected in a subdirectory named RUN_ID. \n  # The specified path is relative to the output path given in defaultDir.\n  REDSHIFT : 0.008764 # Initial guess on the redshift of the system [in z]. Spectra are shifted to rest-frame, \n  # according to this redshift.\n  PARALLEL: True # Use multiprocessing [True/False]\n  NCPU : 3 # Number of cores to use for multiprocessing.\n  LSF_DATA : 'lsf_MUSE-WFM' # Path of the file specifying the line-spread-function of the observational data. \n  # The specified path is relative to the configDir path in defaultDir.\n  OW_CONFIG : False #  Ignore configurations from previous runs which are saved in the CONFIG file in the \n  # output directory [True/False]\n  OW_OUTPUT : True # Overwrite any output files already present in the current output directory [True/False]\n\n# Read data module\nREAD_DATA :\n  METHOD : 'MUSE_WFM' # Name of the routine in readData/ (without .py) to be used to read-in the input data.\n  DEBUG : FALSE # Switch to activate debug mode [True/False]: Pipeline runs on one, central line of pixels. \n  # Keep in mind to clean output directory after running in DEBUG mode!\n  ORIGIN : 14,14 # Origin of the coordinate system in pixel coordinates: x,y (Indexing starts at 0).\n  LMIN_TOT : 4750 # Spectra are shortened to the rest-frame wavelength range defined by LMIN_TOT and LMAX_TOT. \n  # Note that this wavelength range should be longer than all other wavelength ranges supplied to the modules \n  # [in Angst.]\n  LMAX_TOT : 7100\n  LMIN_SNR : 4750 # Rest-frame wavelength range used for the signal-to-noise calculation [in Angst.]\n  LMAX_SNR : 7100\n  EBmV : 0.0367 # Galactic foreground dust redenning. Set to null for no dust correction  [value/null]\n\n# Spatial masking module\nSPATIAL_MASKING :\n  METHOD : 'default' # Name of the routine in spatialMasking/ (without .py) to perform the tasks. \n  # Set 'False' to turn off module. Set 'default' to use the standard GIST implementation.\n  MIN_SNR : 20.0 # Spaxels below the isophote level which has this mean signal-to-noise level are masked.\n  MASK : 'NGC0000_mask.fits' # File containing a spatial mask (Set 'False' to not include a file).\n\n# Spatial binning module\nSPATIAL_BINNING :\n  METHOD : 'voronoi' # Name of the routine in spatialBinning/ (without .py) to perform the tasks. \n  # Set 'False' to turn off module. Set 'voronoi' to use the standard GIST implementation, exploiting the \n  # Voronoi tesselation routine of Cappellari &amp; Copin (2003).\n  TARGET_SNR : 500.0 # Target signal-to-noise ratio for the Voronoi binning\n  COVARIANCE : 0.0 # Correct for spatial correlations of the noise during the Voronoi binning process according \n  # to the empirical equation SNR /= 1 + COVAR_VOR * np.log10(NSPAXEL) with NSPAXEL being the number of spaxels \n  # per bin (see e.g. Garcia-Benito et al. 2015).\n\n# Prepare spectra module\nPREPARE_SPECTRA :\n  METHOD : 'default'\n  VELSCALE : 41 # km/s\n\n# Stellar kinematics module\nKIN :\n  METHOD : 'ppxf' # Name of the routine in stellarKinematics/ (without .py) to perform the tasks. Set 'False' \n  # to turn off module. Set 'ppxf' to use the standard nGIST implementation, exploiting the pPXF routine of \n  # Cappellari &amp; Emsellem (2004).\n  SPEC_MASK : 'specMask_KIN' # File to define wavelength ranges to be masked during the stellar kinematics fit. \n  # The specified path is relative to the configDir path in defaultDir.\n  LMIN : 4750 # Rest-frame wavelength range used for the stellar kinematics analysis [in Angst.]\n  LMAX : 7100\n  SIGMA : 100 # Initial guess of the velocity dispersion of the system [in km/s]\n  MOM : 4 # Number of kinematic moments to be extracted\n  ADEG : 12 # Degree of the additive Legendre polynomial. Set '-1' to not include any additive polynomials\n  MDEG : 0 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials\n  REDDENING : null # Initial guess on the stellar reddening E(B-V), in order to measure the \n  # stellar reddening. Note: This cannot be used together with multiplicative polynomials.\n  MC_PPXF : 0 # Number of Monte-Carlo simulations to extract errors on the stellar kinematics. Formal errors are \n  # saved in any case.\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. \n  # The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS' or 'walcher'\n  LIBRARY : 'MILES/' # options are 'MILES/', 'miles_ssp_ch/', 'IndoUS', and 'Walcher/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n  DOCLEAN : True # Keyword to turn on/off the sigma clipping. Set to 'False' for testing.\n\n# Continuum Cube module\nCONT :\n  METHOD : 'ppxf' # Name of the routine in stellarKinematics/ (without .py) to perform the tasks. Set 'False' to turn off module. Set 'ppxf' to use the standard nGIST implementation, exploiting the pPXF routine of Cappellari &amp; Emsellem (2004).\n  SPEC_MASK : 'specMask_KIN' # File to define wavelength ranges to be masked during the stellar kinematics fit. The specified path is relative to the configDir path in defaultDir.\n  LMIN : 4800 # Rest-frame wavelength range used for the stellar kinematics analysis [in Angst.]\n  LMAX : 7000\n  SIGMA : 100 # Initial guess of the velocity dispersion of the system [in km/s]\n  MOM : 4 # Number of kinematic moments to be extracted\n  ADEG : 0 # Degree of the additive Legendre polynomial. Set '-1' to not include any additive polynomials\n  MDEG : 8 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials\n  REDDENING : null # As opposed to None. Initial guess on the stellar reddening E(B-V), in order to measure the stellar reddening. Note: This cannot be used together with multiplicative polynomials.\n  MC_PPXF : 0 # Number of Monte-Carlo simulations to extract errors on the stellar kinematics. Formal errors are saved in any case.\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS' or 'walcher'\n  LIBRARY : 'MILES/' # options are 'MILES/', 'miles_ssp_ch/', 'IndoUS', and 'Walcher/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n  DOCLEAN : True # Keyword to turn on/off the sigma clipping. Set to 'False' for testing.\n\n# Emission line fitting module\nGAS :\n  METHOD : 'ppxf' # options are 'ppxf', 'gandalf' or 'MAGPI_gandalf' Name of the routine in emissionLines/ (without .py) \n  #to perform the tasks. Set 'False' to turn off module. \n  SPEC_MASK : 'specMask_GAS'\n  LEVEL : 'BIN' # Set 'BIN' to perform the analysis bin-by-bin, 'SPAXEL' for a spaxel-by-spaxel analysis, and 'BOTH' \n  # to perform a spaxel-by-spaxel analysis that is informed by a previous bin-by-bin analysis.\n  LMIN : 4750 # Rest-frame wavelength range used for the emission-line analysis [in Angst.]\n  LMAX : 7100\n  ERRORS : 0 # Derive errors on the emission-line analysis (0 No / 1 Yes). Note: Due to limitations in pyGandALF, \n  # this is currently not possible. We expect a new pyGandALF version to be published soon.\n  REDDENING : False # Include the effect of reddening by dust in the pyGandALF fit. Put in the form 0.1,0.1 without \n  # any spaces. If you intend to use multiplicative polynomials instead, set REDDENING to 'False' and add a \n  # MDEG keyword in the GAS section to set the polynomial order. Additive polynomials cannot be used with pyGandALF.\n  MDEG : 8 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative polynomials.\n  FIXED : True # Fix the stellar kinematics to the results obtained with the stellar kinematics module [True / False]\n  MOM : 2 # Gas moments. Set to 2 for V and sigma. Higher orders not yet tested\n  EBmV : null # De-redden the spectra for the Galactic extinction in the direction of the \n  # target previously to the analysis. Use e.g. EBmV = A_v / 3.2\n  EMI_FILE : 'emissionLinesPHANGS.config' # Emission line set-up file for emline fittet. The specified path is \n  # relative to the configDir path in defaultDir.\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. \n  # The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS'\n  LIBRARY : 'MILES_EMLINES/' # options are 'MILES_EMLINES/' (contains asmaller subset of templates sim \n  # to that used by PHANGS) 'MILES/', 'miles_ssp_ch', or 'IndoUS'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n\n# Star formation histories module\nSFH :\n  METHOD : 'ppxf' # Name of the routine in starFormationHistories/ (without .py) to perform the tasks. \n  # Set 'False' to turn off module. Set 'ppxf' to use the standard GIST implementation, exploiting the \n  # pPXF routine of Cappellari &amp; Emsellem (2004).\n  LMIN : 4750 # Rest-frame wavelength range used for the star formation histories analysis [in Angst.]\n  LMAX : 5500\n  SPEC_MASK : 'specMask_SFH' # File to define wavelength ranges to be masked during the star formation \n  # histories analysis. The specified path is relative to the configDir path in defaultDir.\n  SPEC_EMICLEAN : False # Keyword (True/False) to enable/disable the use of emission line cleaned\n  # spectra from the Emission Line Fitting Module. \n  MOM : 4 # Number of kinematic moments to be extracted. If you use FIXED = True, this should be same \n  # number of moments used to extract the stellar kinematics before. Otherwise the parameter can be set independently.\n  MDEG : 12 # Degree of the multiplicative Legendre polynomial. Set '0' to not include any multiplicative \n  # polynomials. Note that additive Legendre polynomials cannot be used for this module.\n  REGUL_ERR : 1000000. # Regularisation error for the regularised run of pPXF. Note: Regularisation = 1 / REGUL_ERR\n  NOISE : 1. # Set a wavelength independent noise vector to be passed to pPXF.\n  FIXED : True # Fix the stellar kinematics to the results obtained with the stellar kinematics module \n  # [True / False]. If 'False', please provide an initial guess on the velocity dispersion of the systems \n  # [in km/s] by adding the parameter SIGMA.\n  MC_PPXF : 0 # Added to add the option of running MC on the SFH module\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. \n  # The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS (not recc.)'\n  LIBRARY : 'MILES_SFH/' # options are 'MILES/', 'miles_ssp_ch/', or 'IndoUS/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results \n  # [LIGHT / MASS]\n  DOCLEAN : True # Keyword to turn on/off the sigma clipping. Set to 'False' for testing.\n\n# Line strenghts module\nLS :\n  METHOD : False #'default' # Name of the routine in lineStrengths/ (without .py) to perform the tasks. \n  # Set 'False' to turn off module. Set 'default' to use the standard GIST implementation, exploiting the \n  # routines of Kuntschner et al. (2006) and Martin-Navarro et al. (2018).\n  TYPE : 'SPP' # Set 'LS' to only measure line strength indices, or 'SPP' to also match these indices \n  # to stellar population properties.\n  LS_FILE : 'lsBands.config' # File to define the wavelength band of the line strength indices to \n  # be measured. The specified path is relative to the configDir path in defaultDir.\n  CONV_COR : 8.4 # Spectral resolution [in Angst.] at which the line strength indices are measured.\n  SPP_FILE : 'MILES_KB_LIS8.4.fits' # File providing predictions on line strength indices for a \n  # set of single stellar population models\n  MC_LS : 30 # Number of Monte-Carlo simulations in order to obtain errors on the line strength indices. \n  # Note: This must be turned on.\n  NWALKER : 10 # Number of walkers for the MCMC algorithm (used for the conversion of indices to population properties)\n  NCHAIN : 100 # Number of iterations in the MCMC algorithm (used for the conversion of indices to population properties)\n  LSF_TEMP : 'lsf_MILES' # Path of the file specifying the line-spread-function of the spectral templates. \n  # The specified path is relative to the configDir path in defaultDir.\n  TEMPLATE_SET : 'miles' # options are 'miles' or 'IndoUS'\n  LIBRARY : 'MILES/' # options are 'MILES/', 'miles_ssp_ch/', or 'IndoUS/'\n  NORM_TEMP : 'LIGHT' # Normalise the spectral template library to obtain light- or mass-weighted results [LIGHT / MASS]\n\n# User modules\nUMOD :\n  METHOD : False\n</code></pre>"},{"location":"usage/usefulinfo/","title":"Useful information","text":""},{"location":"usage/usefulinfo/#folder-setup","title":"Folder setup","text":"<p>The ngistTutorial folder contained within the <code>nGIST-supplementary-public</code> repo is your working directory. Within it, you will find four folders: <code>configFiles</code>, <code>inputData</code>, <code>results</code>, and <code>spectralTemplates</code>. </p> <ul> <li> <p><code>configFiles</code>: contains your <code>MasterConfig.yaml</code> file, as well as some files describing the LSF of your chosen instrument and SSP template set. Also included are some files describing the emission lines to fit, and the line strengh indices. </p> </li> <li> <p><code>inputData</code>: contains the IFS datacube that you wish to analyse and its associated spatial mask.</p> </li> <li> <p><code>results</code>: this is the folder that your results will save in to.</p> </li> <li> <p><code>spectralTemplates</code>: Place the SSP models that you wish to use in this folder. </p> </li> </ul>"},{"location":"usage/usefulinfo/#example-data","title":"Example data","text":"<p>The gistTutorial folder comes with the default NGC0000.fits and NGC0000_mask.fits files. These are small MUSE data cubes which may be used for initial testing because they will run quicker.</p>"},{"location":"usage/usefulinfo/#basic-usage","title":"Basic usage","text":"<p>nGIST takes the settings from your input MasterConfig file and feeds them into the nGIST pipeline. Therefore, all you need to edit is the MasterConfig.yaml file before each run. </p>"}]}